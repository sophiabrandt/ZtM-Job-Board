{"version":3,"file":"static/js/711.72e8e51b.chunk.js","mappings":"0OAiBaA,E,g3jCAVyBC,KAAI,SAACC,GACvC,MAAO,CACHC,KAAMD,EAAQE,QACdC,OAAQ,CACJC,WAAWJ,EAAQK,UAAUC,QAAQ,GACrCF,WAAWJ,EAAQO,WAAWD,QAAQ,IAGlD,I,SCAME,EAA8BC,OAAOC,QAAQC,EAAAA,GAC/CC,EAAuB,GAwG3B,MAtGA,SAAkBC,GAAgB,IAADC,EAAAD,EAAZE,KAAAA,OAAI,IAAAD,EAAG,EAACA,EACzBE,GAAsDC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA3DI,EAAmBF,EAAA,GAAEG,EAAsBH,EAAA,IAClDI,EAAAA,EAAAA,YAAU,WACND,EAAuBvB,EAC3B,GAAG,IAEH,IAAIyB,EAA0BH,EAAoBrB,KAC9C,SAAAyB,GAAe,MAAQ,CACnBvB,KADGuB,EAAJvB,KAECE,OAFWqB,EAANrB,OAGR,IAIDsB,EAAsC,IAC1C,WAAyC,IACYC,EADbC,GAAAC,EAAAA,EAAAA,GACdpB,GAA2B,IAAjD,IAAAmB,EAAAE,MAAAH,EAAAC,EAAAG,KAAAC,MACI,IADgD,IAAzCC,EAAON,EAAAO,MAAAC,EAAA,SACLC,GAEDH,EAAQ,GAAGI,gBACPb,EAAmBY,GAAGlC,KAAKmC,eAC9BX,EAA+BY,MAC5B,SAACC,GAAU,OACPA,EAAMtC,QAAQoC,gBACdb,EAAmBY,GAAGlC,KAAKmC,aAAa,KAGhDX,EAA+Bc,KAAK,CAChCvC,QAASuB,EAAmBY,GAAGlC,KAC/BE,OAAQoB,EAAmBY,GAAGhC,OAC9BqC,aAAcR,GAErB,EAfIG,EAAI,EAAGA,EAAIZ,EAAmBkB,OAAQN,IAAKD,EAA3CC,EAiBZ,OAAAO,GAAAf,EAAAgB,EAAAD,EAAA,SAAAf,EAAAiB,GAAA,CAGL,CACAC,GAoBA,IAAMC,EAAerB,EAA+B1B,KAChD,SAAAgD,GAA6C,IAA1C/C,EAAO+C,EAAP/C,QAASG,EAAM4C,EAAN5C,OAAQqC,EAAYO,EAAZP,aACZQ,EACiB,IAAjBR,EACMA,EAAe,mBAAqBxC,EACpCwC,EAAe,oBAAsBxC,EAC/C,OACIiD,EAAAA,EAAAA,MAACC,EAAAA,EAAM,CAAeC,SAAU,CAAChD,EAAO,GAAIA,EAAO,IAAIiD,SAAA,EACnDC,EAAAA,EAAAA,KAACC,EAAAA,EAAO,CAAAF,SAAEJ,KACVK,EAAAA,EAAAA,KAACE,EAAAA,EAAK,CAAAH,SAAEJ,MAFChD,EAKrB,IAGEwD,EACF5C,EAAgB6B,OAAS,EACnB,CAAC7B,EAAgB,GAAG6C,IAAK7C,EAAgB,GAAG8C,KAC5C,CAAC,WAAY,UAEvB,OACIL,EAAAA,EAAAA,KAAA,OAAKM,MAAO,CAAEC,OAAQ,OAAQC,MAAO,OAAQC,OAAQ,GAAIV,UACrDH,EAAAA,EAAAA,MAACc,EAAAA,EAAU,CACPP,OAAQA,EACRzC,KAAMA,EACNiD,QAAS,EACTC,QAAS,GACTC,oBAAoB,EACpBC,aAAa,EACbC,iBAAiB,EACjBC,iBAAiB,EACjBC,UAAU,EACVC,cAAe,IAAKnB,SAAA,EAEpBC,EAAAA,EAAAA,KAACmB,EAAAA,EAAS,CACNC,YAAY,2EACZC,IAAI,uDAEP5B,MAIjB,C","sources":["util/CountriesDataFilter.tsx","components/Map.tsx"],"sourcesContent":["import countriesData from '../assets/countries.json'\n\nimport Country from '../interfaces/country'\n\nconst countries: any = countriesData\n\n// Filter the country data to return only a name and [lat,lng] values\nconst filteredCountryData = countries.map((country: Country) => {\n    return {\n        name: country.COUNTRY,\n        latlng: [\n            parseFloat(country.latitude).toFixed(1),\n            parseFloat(country.longitude).toFixed(1),\n        ],\n    }\n})\n\nexport const countriesWithLatLng = filteredCountryData\n","import React, { useEffect, useState } from 'react'\nimport {\n    MapContainer as LeafletMap,\n    Marker,\n    Popup,\n    TileLayer,\n    Tooltip,\n} from 'react-leaflet'\n\nimport { countriesWithNumOfDevsObj } from '../util/UsersDataCleanup'\nimport { countriesWithLatLng } from '../util/CountriesDataFilter'\n\n// Array of country names and number of devs in those countries\n/* Needed to match country names from countriesWithNumOfDevsObj against \ncountry names fetched from API to get their latitude and longitude for markers */\nconst countryNamesAndNumOfDevsArr = Object.entries(countriesWithNumOfDevsObj)\nlet centerLatLngArr: any = []\n\nfunction SimpleMap({ zoom = 3 }) {\n    const [allCountriesLatLang, setAllCountriesLatLang] = useState([])\n    useEffect(() => {\n        setAllCountriesLatLang(countriesWithLatLng)\n    }, [])\n\n    let countriesLatLngArr: any = allCountriesLatLang.map(\n        ({ name, latlng }) => ({\n            name,\n            latlng,\n        })\n    )\n\n    // Two nested for loops are okay as array items will always be < 250 in both arrays\n    let finalArrayWithCountryAndLatLng: any = []\n    function finalCountryAndLocationArray() {\n        for (const element of countryNamesAndNumOfDevsArr) {\n            for (let j = 0; j < countriesLatLngArr.length; j++) {\n                if (\n                    element[0].toLowerCase() ===\n                        countriesLatLngArr[j].name.toLowerCase() &&\n                    !finalArrayWithCountryAndLatLng.some(\n                        (entry: any) =>\n                            entry.country.toLowerCase() ===\n                            countriesLatLngArr[j].name.toLowerCase()\n                    )\n                ) {\n                    finalArrayWithCountryAndLatLng.push({\n                        country: countriesLatLngArr[j].name,\n                        latlng: countriesLatLngArr[j].latlng,\n                        numberOfDevs: element,\n                    })\n                }\n            }\n        }\n\n        return finalArrayWithCountryAndLatLng\n    }\n    finalCountryAndLocationArray()\n\n    // DO NOT DELETE THIS COMMENTED OUT CODE BELOW\n    // Might need it to check for unexpected repeated entries which is easier with sorted countries\n    /*\n  let sorterFunction = finalArrayWithCountryAndLatLng.sort(function(a, b) {\n    var nameA = a.country.toUpperCase(); // ignore upper and lowercase\n    var nameB = b.country.toUpperCase(); // ignore upper and lowercase\n    if (nameA < nameB) {\n      return -1;\n    }\n    if (nameA > nameB) {\n      return 1;\n    }\n    // names must be equal\n    return 0;\n  });\n  console.log(sorterFunction);\n  */\n\n    const markersArray = finalArrayWithCountryAndLatLng.map(\n        ({ country, latlng, numberOfDevs }: any) => {\n            let numberOfDevsText =\n                numberOfDevs === 1\n                    ? numberOfDevs + ' Developer from ' + country\n                    : numberOfDevs + ' Developers from ' + country\n            return (\n                <Marker key={country} position={[latlng[0], latlng[1]]}>\n                    <Tooltip>{numberOfDevsText}</Tooltip>\n                    <Popup>{numberOfDevsText}</Popup>\n                </Marker>\n            )\n        }\n    )\n\n    const center: any =\n        centerLatLngArr.length > 0\n            ? [centerLatLngArr[0].lat, centerLatLngArr[0].lng]\n            : [55.378052, -3.435973]\n\n    return (\n        <div style={{ height: '90vh', width: '100%', margin: 0 }}>\n            <LeafletMap\n                center={center}\n                zoom={zoom}\n                minZoom={1}\n                maxZoom={10}\n                attributionControl={true}\n                zoomControl={true}\n                doubleClickZoom={true}\n                scrollWheelZoom={true}\n                dragging={true}\n                easeLinearity={0.35}\n            >\n                <TileLayer\n                    attribution='&amp;copy <a href=\"https://osm.org/copyright\">OpenStreetMap</a> contributors'\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                />\n                {markersArray}\n            </LeafletMap>\n        </div>\n    )\n}\n\nexport default SimpleMap\n"],"names":["countriesWithLatLng","map","country","name","COUNTRY","latlng","parseFloat","latitude","toFixed","longitude","countryNamesAndNumOfDevsArr","Object","entries","countriesWithNumOfDevsObj","centerLatLngArr","_ref","_ref$zoom","zoom","_useState","useState","_useState2","_slicedToArray","allCountriesLatLang","setAllCountriesLatLang","useEffect","countriesLatLngArr","_ref2","finalArrayWithCountryAndLatLng","_step","_iterator","_createForOfIteratorHelper","s","n","done","element","value","_loop","j","toLowerCase","some","entry","push","numberOfDevs","length","err","e","f","finalCountryAndLocationArray","markersArray","_ref3","numberOfDevsText","_jsxs","Marker","position","children","_jsx","Tooltip","Popup","center","lat","lng","style","height","width","margin","LeafletMap","minZoom","maxZoom","attributionControl","zoomControl","doubleClickZoom","scrollWheelZoom","dragging","easeLinearity","TileLayer","attribution","url"],"sourceRoot":""}