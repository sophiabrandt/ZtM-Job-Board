{"version":3,"file":"static/js/711.3fe37fd2.chunk.js","mappings":"yMAiBaA,E,g3jCAVyBC,KAAKC,IAChC,CACHC,KAAMD,EAAQE,QACdC,OAAQ,CACJC,WAAWJ,EAAQK,UAAUC,QAAQ,GACrCF,WAAWJ,EAAQO,WAAWD,QAAQ,Q,aCGlD,MAAME,EAA8BC,OAAOC,QAAQC,EAAAA,GACnD,IAAIC,EAAuB,GAwG3B,QAtGA,SAAkBC,GAAgB,IAAf,KAAEC,EAAO,GAAGD,EAC3B,MAAOE,EAAqBC,IAA0BC,EAAAA,EAAAA,UAAS,KAC/DC,EAAAA,EAAAA,YAAU,KACNF,EAAuBlB,EAAoB,GAC5C,IAEH,IAAIqB,EAA0BJ,EAAoBhB,KAC9CqB,IAAA,IAAC,KAAEnB,EAAI,OAAEE,GAAQiB,EAAA,MAAM,CACnBnB,OACAE,SACH,IAIDkB,EAAsC,IAC1C,WACI,IAAK,MAAMC,KAAWd,EAClB,IAAK,IAAIe,EAAI,EAAGA,EAAIJ,EAAmBK,OAAQD,IAEvCD,EAAQ,GAAGG,gBACPN,EAAmBI,GAAGtB,KAAKwB,eAC9BJ,EAA+BK,MAC3BC,GACGA,EAAM3B,QAAQyB,gBACdN,EAAmBI,GAAGtB,KAAKwB,iBAGnCJ,EAA+BO,KAAK,CAChC5B,QAASmB,EAAmBI,GAAGtB,KAC/BE,OAAQgB,EAAmBI,GAAGpB,OAC9B0B,aAAcP,GAOlC,CACAQ,GAoBA,MAAMC,EAAeV,EAA+BtB,KAChDiC,IAA6C,IAA5C,QAAEhC,EAAO,OAAEG,EAAM,aAAE0B,GAAmBG,EAC/BC,EACiB,IAAjBJ,EACMA,EAAe,mBAAqB7B,EACpC6B,EAAe,oBAAsB7B,EAC/C,OACIkC,EAAAA,EAAAA,MAACC,EAAAA,EAAM,CAAeC,SAAU,CAACjC,EAAO,GAAIA,EAAO,IAAIkC,SAAA,EACnDC,EAAAA,EAAAA,KAACC,EAAAA,EAAO,CAAAF,SAAEJ,KACVK,EAAAA,EAAAA,KAACE,EAAAA,EAAK,CAAAH,SAAEJ,MAFCjC,EAGJ,IAKfyC,EACF7B,EAAgBY,OAAS,EACnB,CAACZ,EAAgB,GAAG8B,IAAK9B,EAAgB,GAAG+B,KAC5C,CAAC,WAAY,UAEvB,OACIL,EAAAA,EAAAA,KAAA,OAAKM,MAAO,CAAEC,OAAQ,OAAQC,MAAO,OAAQC,OAAQ,GAAIV,UACrDH,EAAAA,EAAAA,MAACc,EAAAA,EAAU,CACPP,OAAQA,EACR3B,KAAMA,EACNmC,QAAS,EACTC,QAAS,GACTC,oBAAoB,EACpBC,aAAa,EACbC,iBAAiB,EACjBC,iBAAiB,EACjBC,UAAU,EACVC,cAAe,IAAKnB,SAAA,EAEpBC,EAAAA,EAAAA,KAACmB,EAAAA,EAAS,CACNC,YAAY,2EACZC,IAAI,uDAEP5B,MAIjB,C","sources":["util/CountriesDataFilter.tsx","components/Map.tsx"],"sourcesContent":["import countriesData from '../assets/countries.json'\n\nimport Country from '../interfaces/country'\n\nconst countries: any = countriesData\n\n// Filter the country data to return only a name and [lat,lng] values\nconst filteredCountryData = countries.map((country: Country) => {\n    return {\n        name: country.COUNTRY,\n        latlng: [\n            parseFloat(country.latitude).toFixed(1),\n            parseFloat(country.longitude).toFixed(1),\n        ],\n    }\n})\n\nexport const countriesWithLatLng = filteredCountryData\n","import React, { useEffect, useState } from 'react'\nimport {\n    MapContainer as LeafletMap,\n    Marker,\n    Popup,\n    TileLayer,\n    Tooltip,\n} from 'react-leaflet'\n\nimport { countriesWithNumOfDevsObj } from '../util/UsersDataCleanup'\nimport { countriesWithLatLng } from '../util/CountriesDataFilter'\n\n// Array of country names and number of devs in those countries\n/* Needed to match country names from countriesWithNumOfDevsObj against \ncountry names fetched from API to get their latitude and longitude for markers */\nconst countryNamesAndNumOfDevsArr = Object.entries(countriesWithNumOfDevsObj)\nlet centerLatLngArr: any = []\n\nfunction SimpleMap({ zoom = 3 }) {\n    const [allCountriesLatLang, setAllCountriesLatLang] = useState([])\n    useEffect(() => {\n        setAllCountriesLatLang(countriesWithLatLng)\n    }, [])\n\n    let countriesLatLngArr: any = allCountriesLatLang.map(\n        ({ name, latlng }) => ({\n            name,\n            latlng,\n        })\n    )\n\n    // Two nested for loops are okay as array items will always be < 250 in both arrays\n    let finalArrayWithCountryAndLatLng: any = []\n    function finalCountryAndLocationArray() {\n        for (const element of countryNamesAndNumOfDevsArr) {\n            for (let j = 0; j < countriesLatLngArr.length; j++) {\n                if (\n                    element[0].toLowerCase() ===\n                        countriesLatLngArr[j].name.toLowerCase() &&\n                    !finalArrayWithCountryAndLatLng.some(\n                        (entry: any) =>\n                            entry.country.toLowerCase() ===\n                            countriesLatLngArr[j].name.toLowerCase()\n                    )\n                ) {\n                    finalArrayWithCountryAndLatLng.push({\n                        country: countriesLatLngArr[j].name,\n                        latlng: countriesLatLngArr[j].latlng,\n                        numberOfDevs: element,\n                    })\n                }\n            }\n        }\n\n        return finalArrayWithCountryAndLatLng\n    }\n    finalCountryAndLocationArray()\n\n    // DO NOT DELETE THIS COMMENTED OUT CODE BELOW\n    // Might need it to check for unexpected repeated entries which is easier with sorted countries\n    /*\n  let sorterFunction = finalArrayWithCountryAndLatLng.sort(function(a, b) {\n    var nameA = a.country.toUpperCase(); // ignore upper and lowercase\n    var nameB = b.country.toUpperCase(); // ignore upper and lowercase\n    if (nameA < nameB) {\n      return -1;\n    }\n    if (nameA > nameB) {\n      return 1;\n    }\n    // names must be equal\n    return 0;\n  });\n  console.log(sorterFunction);\n  */\n\n    const markersArray = finalArrayWithCountryAndLatLng.map(\n        ({ country, latlng, numberOfDevs }: any) => {\n            let numberOfDevsText =\n                numberOfDevs === 1\n                    ? numberOfDevs + ' Developer from ' + country\n                    : numberOfDevs + ' Developers from ' + country\n            return (\n                <Marker key={country} position={[latlng[0], latlng[1]]}>\n                    <Tooltip>{numberOfDevsText}</Tooltip>\n                    <Popup>{numberOfDevsText}</Popup>\n                </Marker>\n            )\n        }\n    )\n\n    const center: any =\n        centerLatLngArr.length > 0\n            ? [centerLatLngArr[0].lat, centerLatLngArr[0].lng]\n            : [55.378052, -3.435973]\n\n    return (\n        <div style={{ height: '90vh', width: '100%', margin: 0 }}>\n            <LeafletMap\n                center={center}\n                zoom={zoom}\n                minZoom={1}\n                maxZoom={10}\n                attributionControl={true}\n                zoomControl={true}\n                doubleClickZoom={true}\n                scrollWheelZoom={true}\n                dragging={true}\n                easeLinearity={0.35}\n            >\n                <TileLayer\n                    attribution='&amp;copy <a href=\"https://osm.org/copyright\">OpenStreetMap</a> contributors'\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                />\n                {markersArray}\n            </LeafletMap>\n        </div>\n    )\n}\n\nexport default SimpleMap\n"],"names":["countriesWithLatLng","map","country","name","COUNTRY","latlng","parseFloat","latitude","toFixed","longitude","countryNamesAndNumOfDevsArr","Object","entries","countriesWithNumOfDevsObj","centerLatLngArr","_ref","zoom","allCountriesLatLang","setAllCountriesLatLang","useState","useEffect","countriesLatLngArr","_ref2","finalArrayWithCountryAndLatLng","element","j","length","toLowerCase","some","entry","push","numberOfDevs","finalCountryAndLocationArray","markersArray","_ref3","numberOfDevsText","_jsxs","Marker","position","children","_jsx","Tooltip","Popup","center","lat","lng","style","height","width","margin","LeafletMap","minZoom","maxZoom","attributionControl","zoomControl","doubleClickZoom","scrollWheelZoom","dragging","easeLinearity","TileLayer","attribution","url"],"sourceRoot":""}